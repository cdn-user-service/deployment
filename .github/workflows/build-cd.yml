deploy:
    needs: check-images
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Compose File
        id: select_compose
        run: |
          if [[ "${{ inputs.environment }}" == "production" ]]; then
            echo "COMPOSE_FILE=scripts/docker-compose.full.yml" >> $GITHUB_ENV
          elif [[ "${{ inputs.environment }}" == "development" ]]; then
            echo "COMPOSE_FILE=scripts/docker-compose.yml" >> $GITHUB_ENV
          else
            echo "❌ Unknown environment"
            exit 1
          fi       

      - name: Validate images for selected services
        run: |
          case "${{ inputs.services }}" in
            "frontend-only")
              if [[ "${{ needs.check-images.outputs.frontend_available }}" != "true" ]]; then
                echo "❌ Frontend image not available"
                exit 1
              fi
              ;;
            "backend-only")
              if [[ "${{ needs.check-images.outputs.backend_available }}" != "true" ]]; then
                echo "❌ Backend image not available"
                exit 1
              fi
              ;;
            "all")
              if [[ "${{ needs.check-images.outputs.frontend_available }}" != "true" || "${{ needs.check-images.outputs.backend_available }}" != "true" ]]; then
                echo "❌ Some images not available"
                exit 1
              fi
              ;;
          esac
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Pre-deployment health check
        run: |
          echo "## 🏥 Pre-deployment Health Check"
          if docker compose -f ${{ env.COMPOSE_FILE }} ps --services --filter "status=running" | grep -q .; then
            echo "✅ Current services are running"
            docker compose -f ${{ env.COMPOSE_FILE }} ps
          else
            echo "ℹ️ No services currently running"
          fi
          
      - name: Backup current state
        id: backup
        run: |
          BACKUP_TAG="backup-$(date +%Y%m%d-%H%M%S)"
          echo "backup_tag=$BACKUP_TAG" >> $GITHUB_OUTPUT
          
          # Save current container info for rollback
          docker compose -f ${{ env.COMPOSE_FILE }} ps --format json > current_state.json || echo "[]" > current_state.json
          echo "✅ Current state backed up"
          
      - name: Pull and deploy selected services
        id: deployment
        run: |
          echo "## 🚀 Deploying: ${{ inputs.services }}"
          
          # Pull images based on selection
          case "${{ inputs.services }}" in
            "frontend-only")
              docker pull ${{ env.FRONTEND_IMAGE }}:latest
              docker compose -f ${{ env.COMPOSE_FILE }} up -d --no-deps frontend
              ;;
            "backend-only")
              docker pull ${{ env.BACKEND_IMAGE }}:latest
              docker compose -f ${{ env.COMPOSE_FILE }} up -d --no-deps backend
              ;;
            "all")
              docker pull ${{ env.FRONTEND_IMAGE }}:latest
              docker pull ${{ env.BACKEND_IMAGE }}:latest
              docker compose -f ${{ env.COMPOSE_FILE }} down --timeout 30 || true
              docker compose -f ${{ env.COMPOSE_FILE }} up -d
              ;;
          esac
          
          # Check if deployment succeeded
          if docker compose -f ${{ env.COMPOSE_FILE }} ps --services --filter "status=running" | grep -q .; then
            echo "✅ Deployment successful"
          else
            echo "❌ Deployment failed"
            exit 1
          fi
          
      - name: Post-deployment health check
        id: health_check
        run: |
          echo "## 🔍 Post-deployment Health Check"
          sleep 30
          
          # Check container status
          FAILED_CONTAINERS=$(docker compose -f ${{ env.COMPOSE_FILE }} ps --format "table {{.Name}}\t{{.Status}}" | grep -v "Up" | tail -n +2 || true)
          
          if [[ -n "$FAILED_CONTAINERS" ]]; then
            echo "❌ Some containers failed to start:"
            echo "$FAILED_CONTAINERS"
            exit 1
          else
            echo "✅ All containers are healthy"
            docker compose -f ${{ env.COMPOSE_FILE }} ps
          fi

      - name: Generate success summary
        run: |
          echo "## ✅ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: \`${{ inputs.environment }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Services**: \`${{ inputs.services }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Time**: \`$(date)\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Running Containers" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          docker compose -f ${{ env.COMPOSE_FILE }} ps >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
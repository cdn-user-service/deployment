name: Deployment CD Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - development
      services:
        description: 'Services to deploy'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - frontend-only
          - backend-only

env:
  FRONTEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/frontend-cdn-user
  BACKEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/cdn-user-service
  COMPOSE_FILE: scripts/docker-compose.yml
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

jobs:
  check-images:
    runs-on: ubuntu-latest
    outputs:
      frontend_available: ${{ steps.check.outputs.frontend_available }}
      backend_available: ${{ steps.check.outputs.backend_available }}
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          
      - name: Check image availability
        id: check
        run: |
          # Check frontend image
          if docker manifest inspect ${{ env.FRONTEND_IMAGE }}:latest > /dev/null 2>&1; then
            echo "frontend_available=true" >> $GITHUB_OUTPUT
            echo "✅ Frontend image available"
          else
            echo "frontend_available=false" >> $GITHUB_OUTPUT
            echo "❌ Frontend image not found"
          fi
          
          # Check backend image  
          if docker manifest inspect ${{ env.BACKEND_IMAGE }}:latest > /dev/null 2>&1; then
            echo "backend_available=true" >> $GITHUB_OUTPUT
            echo "✅ Backend image available"
          else
            echo "backend_available=false" >> $GITHUB_OUTPUT
            echo "❌ Backend image not found"
          fi

  deploy:
    needs: check-images
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Compose File
        id: select_compose
        run: |
          if [[ "${{ inputs.environment }}" == "production" ]]; then
            echo "COMPOSE_FILE=scripts/docker-compose.full.yml" >> $GITHUB_ENV
          elif [[ "${{ inputs.environment }}" == "development" ]]; then
            echo "COMPOSE_FILE=scripts/docker-compose.yml" >> $GITHUB_ENV
          else
            echo "❌ Unknown environment"
            exit 1
          fi       

      - name: Validate images for selected services
        run: |
          case "${{ inputs.services }}" in
            "frontend-only")
              if [[ "${{ needs.check-images.outputs.frontend_available }}" != "true" ]]; then
                echo "❌ Frontend image not available"
                exit 1
              fi
              ;;
            "backend-only")
              if [[ "${{ needs.check-images.outputs.backend_available }}" != "true" ]]; then
                echo "❌ Backend image not available"
                exit 1
              fi
              ;;
            "all")
              if [[ "${{ needs.check-images.outputs.frontend_available }}" != "true" || "${{ needs.check-images.outputs.backend_available }}" != "true" ]]; then
                echo "❌ Some images not available"
                exit 1
              fi
              ;;
          esac
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Pre-deployment health check
        run: |
          echo "## 🏥 Pre-deployment Health Check"
          if docker compose -f ${{ env.COMPOSE_FILE }} ps --services --filter "status=running" | grep -q .; then
            echo "✅ Current services are running"
            docker compose -f ${{ env.COMPOSE_FILE }} ps
          else
            echo "ℹ️ No services currently running"
          fi
          
      - name: Backup current state
        id: backup
        run: |
          BACKUP_TAG="backup-$(date +%Y%m%d-%H%M%S)"
          echo "backup_tag=$BACKUP_TAG" >> $GITHUB_OUTPUT
          
          # Save current container info for rollback
          docker compose -f ${{ env.COMPOSE_FILE }} ps --format json > current_state.json || echo "[]" > current_state.json
          echo "✅ Current state backed up"
          
      - name: Pull and deploy selected services
        run: |
          echo "## 🚀 Deploying: ${{ inputs.services }}"
          
          # Pull images based on selection
          case "${{ inputs.services }}" in
            "frontend-only")
              docker pull ${{ env.FRONTEND_IMAGE }}:latest
              docker compose -f ${{ env.COMPOSE_FILE }} up -d --no-deps frontend
              ;;
            "backend-only")
              docker pull ${{ env.BACKEND_IMAGE }}:latest
              docker compose -f ${{ env.COMPOSE_FILE }} up -d --no-deps backend
              ;;
            "all")
              docker pull ${{ env.FRONTEND_IMAGE }}:latest
              docker pull ${{ env.BACKEND_IMAGE }}:latest
              docker compose -f ${{ env.COMPOSE_FILE }} down --timeout 30
              docker compose -f ${{ env.COMPOSE_FILE }} up -d
              ;;
          esac
          
      - name: Post-deployment health check
        id: health_check
        run: |
          echo "## 🔍 Post-deployment Health Check"
          sleep 30
          
          # Check container status
          FAILED_CONTAINERS=$(docker compose -f ${{ env.COMPOSE_FILE }} ps --format "table {{.Name}}\t{{.Status}}" | grep -v "Up" | tail -n +2 || true)
          
          if [[ -n "$FAILED_CONTAINERS" ]]; then
            echo "health_status=failed" >> $GITHUB_OUTPUT
            echo "❌ Some containers failed to start:"
            echo "$FAILED_CONTAINERS"
            exit 1
          else
            echo "health_status=success" >> $GITHUB_OUTPUT
            echo "✅ All containers are healthy"
            docker compose -f ${{ env.COMPOSE_FILE }} ps
          fi
          
      - name: Generate summary
        if: success()
        run: |
          echo "## ✅ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: \`${{ inputs.environment }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Services**: \`${{ inputs.services }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Time**: \`$(date)\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Running Containers" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          docker compose -f ${{ env.COMPOSE_FILE }} ps
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    rollback:
      needs: [check-images, deploy]
      runs-on: ubuntu-latest
      # 修改触发条件：任何一个前置job失败都触发回滚
      if: always() && (needs.check-images.result == 'failure' || needs.deploy.result == 'failure')
      
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
          
        - name: Select Compose File
          id: select_compose
          run: |
            if [[ "${{ inputs.environment }}" == "production" ]]; then
              echo "COMPOSE_FILE=scripts/docker-compose.full.yml" >> $GITHUB_ENV
            elif [[ "${{ inputs.environment }}" == "development" ]]; then
              echo "COMPOSE_FILE=scripts/docker-compose.yml" >> $GITHUB_ENV
            else
              echo "❌ Unknown environment"
              exit 1
            fi
          
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_TOKEN }}
            
        - name: Check if services are running
          id: check_services
          run: |
            if docker compose -f ${{ env.COMPOSE_FILE }} ps --services --filter "status=running" | grep -q .; then
              echo "services_running=true" >> $GITHUB_OUTPUT
              echo "ℹ️ Found running services, will attempt rollback"
            else
              echo "services_running=false" >> $GITHUB_OUTPUT
              echo "ℹ️ No services currently running, will start from clean state"
            fi
            
        - name: Rollback deployment
          run: |
            echo "## 🔄 Rolling Back Deployment"
            
            # 首先停止可能处于异常状态的容器
            docker compose -f ${{ env.COMPOSE_FILE }} down --timeout 30 || true
            
            # 清理可能的部分拉取的镜像
            docker system prune -f || true
            
            # 重新启动服务（使用之前工作的镜像）
            echo "Attempting to restart services with last known good configuration..."
            docker compose -f ${{ env.COMPOSE_FILE }} up -d
            
            sleep 20
            
            # 检查回滚后的状态
            if docker compose -f ${{ env.COMPOSE_FILE }} ps --services --filter "status=running" | grep -q .; then
              echo "✅ Rollback completed successfully"
              docker compose -f ${{ env.COMPOSE_FILE }} ps
            else
              echo "❌ Rollback failed - no services running"
              exit 1
            fi
            
        - name: Generate rollback summary
          run: |
            echo "## ❌ Deployment Failed - Rollback Completed" >> $GITHUB_STEP_SUMMARY
            echo "- **Environment**: \`${{ inputs.environment }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Failed Services**: \`${{ inputs.services }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Failure Reason**: \`${{ needs.check-images.result == 'failure' && 'Image check failed' || 'Deployment failed' }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Rollback Time**: \`$(date)\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Current Status After Rollback" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            docker compose -f ${{ env.COMPOSE_FILE }} ps
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
name: Deployment CD Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - development
      services:
        description: 'Services to deploy'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - frontend-only
          - backend-only

env:
  FRONTEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/frontend-cdn-user
  BACKEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/cdn-user-service
  COMPOSE_FILE: scripts/docker-compose.yml
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

jobs:
  check-images:
    runs-on: ubuntu-latest
    outputs:
      frontend_available: ${{ steps.check.outputs.frontend_available }}
      backend_available: ${{ steps.check.outputs.backend_available }}
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          
      - name: Check image availability
        id: check
        run: |
          # Check frontend image
          if docker manifest inspect ${{ env.FRONTEND_IMAGE }}:latest > /dev/null 2>&1; then
            echo "frontend_available=true" >> $GITHUB_OUTPUT
            echo "✅ Frontend image available"
          else
            echo "frontend_available=false" >> $GITHUB_OUTPUT
            echo "❌ Frontend image not found"
          fi
          
          # Check backend image  
          if docker manifest inspect ${{ env.BACKEND_IMAGE }}:latest > /dev/null 2>&1; then
            echo "backend_available=true" >> $GITHUB_OUTPUT
            echo "✅ Backend image available"
          else
            echo "backend_available=false" >> $GITHUB_OUTPUT
            echo "❌ Backend image not found"
          fi

  deploy:
    needs: check-images
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Compose File
        id: select_compose
        run: |
          if [[ "${{ inputs.environment }}" == "production" ]]; then
            echo "COMPOSE_FILE=scripts/docker-compose.full.yml" >> $GITHUB_ENV
          elif [[ "${{ inputs.environment }}" == "development" ]]; then
            echo "COMPOSE_FILE=scripts/docker-compose.yml" >> $GITHUB_ENV
          else
            echo "❌ Unknown environment"
            exit 1
          fi       

      - name: Validate images for selected services
        run: |
          case "${{ inputs.services }}" in
            "frontend-only")
              if [[ "${{ needs.check-images.outputs.frontend_available }}" != "true" ]]; then
                echo "❌ Frontend image not available"
                exit 1
              fi
              ;;
            "backend-only")
              if [[ "${{ needs.check-images.outputs.backend_available }}" != "true" ]]; then
                echo "❌ Backend image not available"
                exit 1
              fi
              ;;
            "all")
              if [[ "${{ needs.check-images.outputs.frontend_available }}" != "true" || "${{ needs.check-images.outputs.backend_available }}" != "true" ]]; then
                echo "❌ Some images not available"
                exit 1
              fi
              ;;
          esac
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Pre-deployment health check
        run: |
          echo "## 🏥 Pre-deployment Health Check"
          if docker compose -f ${{ env.COMPOSE_FILE }} ps --services --filter "status=running" | grep -q .; then
            echo "✅ Current services are running"
            docker compose -f ${{ env.COMPOSE_FILE }} ps
          else
            echo "ℹ️ No services currently running"
          fi
          
      - name: Backup current state
        id: backup
        run: |
          BACKUP_TAG="backup-$(date +%Y%m%d-%H%M%S)"
          echo "backup_tag=$BACKUP_TAG" >> $GITHUB_OUTPUT
          
          # Save current container info for rollback
          docker compose -f ${{ env.COMPOSE_FILE }} ps --format json > current_state.json || echo "[]" > current_state.json
          echo "✅ Current state backed up"
          
      - name: Pull and deploy selected services
        id: deployment
        continue-on-error: true
        run: |
          echo "## 🚀 Deploying: ${{ inputs.services }}"
          
          # Pull images based on selection
          case "${{ inputs.services }}" in
            "frontend-only")
              docker pull ${{ env.FRONTEND_IMAGE }}:latest
              docker compose -f ${{ env.COMPOSE_FILE }} up -d --no-deps frontend
              ;;
            "backend-only")
              docker pull ${{ env.BACKEND_IMAGE }}:latest
              docker compose -f ${{ env.COMPOSE_FILE }} up -d --no-deps backend
              ;;
            "all")
              docker pull ${{ env.FRONTEND_IMAGE }}:latest
              docker pull ${{ env.BACKEND_IMAGE }}:latest
              docker compose -f ${{ env.COMPOSE_FILE }} down --timeout 30
              docker compose -f ${{ env.COMPOSE_FILE }} up -d
              ;;
          esac
          
      - name: Post-deployment health check
        id: health_check
        if: steps.deployment.outcome == 'success'
        run: |
          echo "## 🔍 Post-deployment Health Check"
          sleep 30
          
          # Check container status
          FAILED_CONTAINERS=$(docker compose -f ${{ env.COMPOSE_FILE }} ps --format "table {{.Name}}\t{{.Status}}" | grep -v "Up" | tail -n +2 || true)
          
          if [[ -n "$FAILED_CONTAINERS" ]]; then
            echo "health_status=failed" >> $GITHUB_OUTPUT
            echo "❌ Some containers failed to start:"
            echo "$FAILED_CONTAINERS"
            exit 1
          else
            echo "health_status=success" >> $GITHUB_OUTPUT
            echo "✅ All containers are healthy"
            docker compose -f ${{ env.COMPOSE_FILE }} ps
          fi

      # 🔄 内联回滚逻辑
      - name: Rollback on failure
        if: |
          always() && 
          (steps.deployment.outcome == 'failure' || 
           steps.health_check.outcome == 'failure' ||
           steps.health_check.outputs.health_status == 'failed')
        run: |
          echo "## 🔄 DEPLOYMENT FAILED - INITIATING ROLLBACK"
          echo "- Deployment outcome: ${{ steps.deployment.outcome }}"
          echo "- Health check outcome: ${{ steps.health_check.outcome }}"
          echo "- Health status: ${{ steps.health_check.outputs.health_status }}"
          
          # 显示当前状态
          echo "## 📊 Current Status Before Rollback"
          docker compose -f ${{ env.COMPOSE_FILE }} ps || echo "No containers found"
          
          # 停止失败的容器
          echo "## 🛑 Stopping failed containers"
          docker compose -f ${{ env.COMPOSE_FILE }} down --timeout 30 || true
          
          # 清理部分拉取的镜像
          echo "## 🧹 Cleaning up"
          docker system prune -f || true
          
          # 尝试重新启动服务
          echo "## 🔄 Attempting to restart services"
          docker compose -f ${{ env.COMPOSE_FILE }} up -d || {
            echo "❌ Rollback failed - cannot restart services"
            echo "Available images:"
            docker images | grep -E "(frontend-cdn-user|cdn-user-service)" || echo "No relevant images found"
            exit 1
          }
          
          # 等待服务启动
          sleep 30
          
          # 检查回滚结果
          echo "## ✅ Post-rollback Status"
          if docker compose -f ${{ env.COMPOSE_FILE }} ps --services --filter "status=running" | grep -q .; then
            echo "✅ Rollback successful - services are running"
            docker compose -f ${{ env.COMPOSE_FILE }} ps
          else
            echo "❌ Rollback failed - no services running"
            docker compose -f ${{ env.COMPOSE_FILE }} logs --tail=50 || true
            exit 1
          fi
          
      - name: Generate success summary
        if: |
          steps.deployment.outcome == 'success' && 
          (steps.health_check.outcome == 'success' || steps.health_check.outcome == 'skipped') &&
          steps.health_check.outputs.health_status != 'failed'
        run: |
          echo "## ✅ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: \`${{ inputs.environment }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Services**: \`${{ inputs.services }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Time**: \`$(date)\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Running Containers" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          docker compose -f ${{ env.COMPOSE_FILE }} ps >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Generate failure summary
        if: |
          always() && 
          (steps.deployment.outcome == 'failure' || 
           steps.health_check.outcome == 'failure' ||
           steps.health_check.outputs.health_status == 'failed')
        run: |
          echo "## ❌ Deployment Failed - Rollback Attempted" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: \`${{ inputs.environment }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Failed Services**: \`${{ inputs.services }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Failure Point**: \`${{ steps.deployment.outcome == 'failure' && 'Image pulling/deployment' || 'Health check' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Rollback Time**: \`$(date)\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Status After Rollback" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          docker compose -f ${{ env.COMPOSE_FILE }} ps >> $GITHUB_STEP_SUMMARY || echo "Failed to get status" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # 保留独立的 rollback job 作为备份
  rollback:
    needs: [check-images, deploy]
    runs-on: ubuntu-latest
    if: |
      always() && 
      (needs.check-images.result == 'failure' || 
       needs.deploy.result == 'failure' || 
       needs.deploy.result == 'cancelled')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Select Compose File
        run: |
          if [[ "${{ inputs.environment }}" == "production" ]]; then
            echo "COMPOSE_FILE=scripts/docker-compose.full.yml" >> $GITHUB_ENV
          elif [[ "${{ inputs.environment }}" == "development" ]]; then
            echo "COMPOSE_FILE=scripts/docker-compose.yml" >> $GITHUB_ENV
          else
            echo "❌ Unknown environment"
            exit 1
          fi
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          
      - name: Emergency rollback
        run: |
          echo "## 🚨 EMERGENCY ROLLBACK - Deploy job failed completely"
          echo "- Check-images result: ${{ needs.check-images.result }}"
          echo "- Deploy result: ${{ needs.deploy.result }}"
          
          # 尝试恢复服务
          docker compose -f ${{ env.COMPOSE_FILE }} down --timeout 30 || true
          docker compose -f ${{ env.COMPOSE_FILE }} up -d || echo "Failed to restart services"
          
          echo "## Current status:"
          docker compose -f ${{ env.COMPOSE_FILE }} ps || echo "No services running"
name: Deployment CD Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - development
      services:
        description: 'Services to deploy'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - frontend-only
          - backend-only

env:
  FRONTEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/frontend-cdn-user
  BACKEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/cdn-user-service
  COMPOSE_FILE: scripts/docker-compose.yml
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

jobs:
  check-images:
    runs-on: ubuntu-latest
    outputs:
      frontend_available: ${{ steps.check.outputs.frontend_available }}
      backend_available: ${{ steps.check.outputs.backend_available }}
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          
      - name: Check image availability
        id: check
        run: |
          # Check frontend image
          if docker manifest inspect ${{ env.FRONTEND_IMAGE }}:latest > /dev/null 2>&1; then
            echo "frontend_available=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Frontend image available"
          else
            echo "frontend_available=false" >> $GITHUB_OUTPUT
            echo "‚ùå Frontend image not found"
          fi
          
          # Check backend image  
          if docker manifest inspect ${{ env.BACKEND_IMAGE }}:latest > /dev/null 2>&1; then
            echo "backend_available=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Backend image available"
          else
            echo "backend_available=false" >> $GITHUB_OUTPUT
            echo "‚ùå Backend image not found"
          fi

  deploy:
    needs: check-images
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Compose File
        id: select_compose
        run: |
          if [[ "${{ inputs.environment }}" == "production" ]]; then
            echo "COMPOSE_FILE=scripts/docker-compose.full.yml" >> $GITHUB_ENV
          elif [[ "${{ inputs.environment }}" == "development" ]]; then
            echo "COMPOSE_FILE=scripts/docker-compose.yml" >> $GITHUB_ENV
          else
            echo "‚ùå Unknown environment"
            exit 1
          fi       

      - name: Validate images for selected services
        run: |
          case "${{ inputs.services }}" in
            "frontend-only")
              if [[ "${{ needs.check-images.outputs.frontend_available }}" != "true" ]]; then
                echo "‚ùå Frontend image not available"
                exit 1
              fi
              ;;
            "backend-only")
              if [[ "${{ needs.check-images.outputs.backend_available }}" != "true" ]]; then
                echo "‚ùå Backend image not available"
                exit 1
              fi
              ;;
            "all")
              if [[ "${{ needs.check-images.outputs.frontend_available }}" != "true" || "${{ needs.check-images.outputs.backend_available }}" != "true" ]]; then
                echo "‚ùå Some images not available"
                exit 1
              fi
              ;;
          esac
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Pre-deployment health check
        run: |
          echo "## üè• Pre-deployment Health Check"
          if docker compose -f ${{ env.COMPOSE_FILE }} ps --services --filter "status=running" | grep -q .; then
            echo "‚úÖ Current services are running"
            docker compose -f ${{ env.COMPOSE_FILE }} ps
          else
            echo "‚ÑπÔ∏è No services currently running"
          fi
          
      - name: Backup current state
        id: backup
        run: |
          BACKUP_TAG="backup-$(date +%Y%m%d-%H%M%S)"
          echo "backup_tag=$BACKUP_TAG" >> $GITHUB_OUTPUT
          
          # Save current container info for rollback
          docker compose -f ${{ env.COMPOSE_FILE }} ps --format json > current_state.json || echo "[]" > current_state.json
          echo "‚úÖ Current state backed up"
          
      - name: Pull and deploy selected services
        id: deployment
        run: |
          echo "## üöÄ Deploying: ${{ inputs.services }}"
          
          # Pull images based on selection
          case "${{ inputs.services }}" in
            "frontend-only")
              docker pull ${{ env.FRONTEND_IMAGE }}:latest
              docker compose -f ${{ env.COMPOSE_FILE }} up -d --no-deps frontend
              ;;
            "backend-only")
              docker pull ${{ env.BACKEND_IMAGE }}:latest
              docker compose -f ${{ env.COMPOSE_FILE }} up -d --no-deps backend
              ;;
            "all")
              docker pull ${{ env.FRONTEND_IMAGE }}:latest
              docker pull ${{ env.BACKEND_IMAGE }}:latest
              docker compose -f ${{ env.COMPOSE_FILE }} down --timeout 30 || true
              docker compose -f ${{ env.COMPOSE_FILE }} up -d
              ;;
          esac
          
          # Check if deployment succeeded
          if docker compose -f ${{ env.COMPOSE_FILE }} ps --services --filter "status=running" | grep -q .; then
            echo "‚úÖ Deployment successful"
          else
            echo "‚ùå Deployment failed"
            exit 1
          fi
          
      - name: Post-deployment health check
        id: health_check
        run: |
          echo "## üîç Post-deployment Health Check"
          sleep 30
          
          # Check container status
          FAILED_CONTAINERS=$(docker compose -f ${{ env.COMPOSE_FILE }} ps --format "table {{.Name}}\t{{.Status}}" | grep -v "Up" | tail -n +2 || true)
          
          if [[ -n "$FAILED_CONTAINERS" ]]; then
            echo "‚ùå Some containers failed to start:"
            echo "$FAILED_CONTAINERS"
            exit 1
          else
            echo "‚úÖ All containers are healthy"
            docker compose -f ${{ env.COMPOSE_FILE }} ps
          fi

      - name: Generate success summary
        run: |
          echo "## ‚úÖ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: \`${{ inputs.environment }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Services**: \`${{ inputs.services }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Time**: \`$(date)\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Running Containers" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          docker compose -f ${{ env.COMPOSE_FILE }} ps >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # Emergency rollback job for complete deploy job failure
  rollback:
    needs: [check-images, deploy]
    runs-on: ubuntu-latest
    if: |
      always() && 
      (needs.check-images.result == 'failure' || 
       needs.deploy.result == 'failure' || 
       needs.deploy.result == 'cancelled')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Select Compose File
        run: |
          if [[ "${{ inputs.environment }}" == "production" ]]; then
            echo "COMPOSE_FILE=scripts/docker-compose.full.yml" >> $GITHUB_ENV
          elif [[ "${{ inputs.environment }}" == "development" ]]; then
            echo "COMPOSE_FILE=scripts/docker-compose.yml" >> $GITHUB_ENV
          else
            echo "‚ùå Unknown environment"
            exit 1
          fi
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          
      - name: Emergency rollback
        run: |
          echo "## üö® EMERGENCY ROLLBACK - Deploy job failed"
          
          # Stop any running containers
          docker compose -f ${{ env.COMPOSE_FILE }} down --timeout 30 || true
          
          # Look for available images
          echo "## üîç Available images:"
          docker images | grep -E "(frontend-cdn-user|cdn-user-service)" || echo "No images found"
          
          # Try to start with correct image names using docker run
          echo "## üîÑ Starting containers with available images"
          
          # Start frontend
          if docker run -d --name emergency-frontend --network host ${{ env.FRONTEND_IMAGE }}:latest; then
            echo "‚úÖ Emergency frontend started"
          else
            # Try with any available local image (most recent first)
            LOCAL_FRONTEND=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep frontend-cdn-user | head -1)
            if [[ -n "$LOCAL_FRONTEND" ]] && docker run -d --name emergency-frontend --network host "$LOCAL_FRONTEND"; then
              echo "‚úÖ Emergency frontend started with local image: $LOCAL_FRONTEND"
            else
              echo "‚ùå Emergency frontend failed"
            fi
          fi
          
          # Start backend
          if docker run -d --name emergency-backend --network host ${{ env.BACKEND_IMAGE }}:latest; then
            echo "‚úÖ Emergency backend started"
          else
            # Try with any available local image (most recent first)
            LOCAL_BACKEND=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep cdn-user-service | head -1)
            if [[ -n "$LOCAL_BACKEND" ]] && docker run -d --name emergency-backend --network host "$LOCAL_BACKEND"; then
              echo "‚úÖ Emergency backend started with local image: $LOCAL_BACKEND"
            else
              echo "‚ùå Emergency backend failed"
            fi
          fi
          
          echo "## Status after emergency rollback:"
          docker ps | grep emergency- || echo "No emergency containers running"
          
      - name: Generate rollback summary
        run: |
          echo "## üîÑ Emergency Rollback Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: \`${{ inputs.environment }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Failed Services**: \`${{ inputs.services }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Rollback Time**: \`$(date)\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Status After Rollback" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          docker ps | grep emergency- >> $GITHUB_STEP_SUMMARY || echo "No emergency containers running" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY